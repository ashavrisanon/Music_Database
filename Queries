                                                                                          Set 1 - Easy

Q1: Who is the senior most employee based on job title?

SELECT title, first_name, last_name
FROM employee 
ORDER BY levels DESC
LIMIT 1

Q2: Which countries have the most Invoices?

SELECT billing_country, COUNT(*)
FROM invoice
GROUP BY billing_country
ORDER BY billing_country DESC
LIMIT 1

Q3: What are top 3 values of total invoice?

SELECT total
FROM invoice
ORDER BY total DESC
LIMIT 3

Q4: Which city has the best customers? We would like to throw a promotional Music Festival in the city we made the most money. 
Write a query that returns one city that has the highest sum of invoice totals. 
Return both the city name & sum of all invoice totals

SELECT billing_city, SUM(total) AS total_invoice
FROM invoice
GROUP BY billing_city
ORDER BY SUM(total) DESC
LIMIT 1

Q5: Who is the best customer? The customer who has spent the most money will be declared the best customer. 
Write a query that returns the person who has spent the most money.

SELECT c.first_name, c.last_name, c.customer_id, SUM(i.total) AS total_spending
FROM invoice i join customer c on i.customer_id = c.customer_id
GROUP BY c.first_name, c.last_name, c.customer_id
ORDER BY SUM(i.total) DESC
LIMIT 1

                                                                                         Set 2 - Moderate

Q1: Write query to return the email, first name, last name, & Genre of all Rock Music listeners. 
Return your list ordered alphabetically by email starting with A.

SELECT DISTINCT c.email, c.first_name, c.last_name
FROM (((customer c JOIN invoice i ON c.customer_id = i.customer_id)
JOIN invoice_line il ON i.invoice_id = il.invoice_id)
JOIN track t ON il.track_id = t.track_id)
JOIN genre g ON t.genre_id = g.genre_id
WHERE g.name = 'Rock'
ORDER BY c.email ASC

Q2: Let's invite the artists who have written the most rock music in our dataset. 
Write a query that returns the Artist name and total track count of the top 10 rock bands.

SELECT r.artist_id, r.name, COUNT(r.artist_id)
FROM (( genre g JOIN track t ON g.genre_id = t.genre_id)
JOIN album a ON a.album_id = t.album_id)
JOIN artist r ON r.artist_id = a.artist_id
WHERE g.name = 'Rock'
GROUP BY r.artist_id, r.name
ORDER BY COUNT(r.artist_id) DESC
LIMIT 10

Q3: Return all the track names that have a song length longer than the average song length. 
Return the Name and Milliseconds for each track. Order by the song length with the longest songs listed first.

SELECT name, milliseconds
FROM track
WHERE milliseconds > (SELECT AVG(milliseconds) FROM track)
ORDER BY milliseconds DESC

                                                                                              Set 3 - Advance

Q1: Find how much amount spent by each customer on artists? Write a query to return customer name, artist name and total spent

WITH best_selling_artist AS 
(SELECT at.artist_id AS artist_id, at.name AS artist_name, SUM(il.unit_price*il.quantity) AS total_sales
FROM ((((customer c JOIN invoice i ON c.customer_id = i.customer_id)
JOIN invoice_line il ON i.invoice_id = il.invoice_id)
JOIN track t ON il.track_id = t.track_id)
JOIN album al ON t.album_id = al.album_id)
JOIN artist at ON al.artist_id = at.artist_id
GROUP BY at.artist_id
ORDER BY SUM(il.unit_price*il.quantity) DESC
LIMIT 1)
SELECT c.customer_id, c.first_name, c.last_name, bsa.artist_name, SUM(il.unit_price*il.quantity) AS amount_spent
FROM ((((customer c JOIN invoice i ON c.customer_id = i.customer_id)
JOIN invoice_line il ON i.invoice_id = il.invoice_id)
JOIN track t ON il.track_id = t.track_id)
JOIN album al ON t.album_id = al.album_id)
JOIN best_selling_artist bsa ON bsa.artist_id = al.artist_id
GROUP BY c.customer_id, c.first_name, c.last_name, bsa.artist_name
ORDER BY SUM(il.unit_price*il.quantity) DESC

Q2: We want to find out the most popular music Genre for each country. We determine the most popular genre as the genre 
with the highest amount of purchases. Write a query that returns each country along with the top Genre. For countries where 
the maximum number of purchases is shared return all Genres.

WITH popular_genre AS
(SELECT COUNT(il.quantity) AS purchases, i.billing_country, g.name, g.genre_id,
ROW_NUMBER() OVER(PARTITION BY i.billing_country ORDER BY COUNT(il.quantity)DESC) AS RowNo
FROM ((invoice i JOIN invoice_line il ON i.invoice_id = il.invoice_id)
JOIN track t ON t.track_id = il.track_id)
JOIN genre g ON g.genre_id = t.genre_id
GROUP BY i.billing_country, g.name, g.genre_id
ORDER BY i.billing_country ASC, COUNT(il.quantity) DESC)
SELECT * FROM popular_genre WHERE RowNo <= 1

Q3: Write a query that determines the customer that has spent the most on music for each country. 
Write a query that returns the country along with the top customer and how much they spent. 
For countries where the top amount spent is shared, provide all customers who spent this amount. 

WITH customer_with_country AS
(SELECT c.customer_id, c.first_name, c.last_name, i.billing_country, SUM(total) AS total_spending,
ROW_NUMBER() OVER(PARTITION BY i.billing_country ORDER BY SUM(total) DESC) AS RowNo
FROM invoice i JOIN customer c ON i.customer_id = c.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name, i.billing_country
ORDER BY i.billing_country ASC, SUM(total) DESC)
SELECT * FROM customer_with_country WHERE RowNo <= 1


